{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aysha\\\\Desktop\\\\Aysha\\\\SJSU\\\\Fall 2019\\\\CMPE 295A\\\\project\\\\frontend\\\\src\\\\components\\\\ThreatSummary\\\\ThreatSummary.js\";\nimport React, { Component } from \"react\";\nimport '../../App.css';\nimport LeftDrawer from '../Drawer/Drawer';\nimport * as imageStyles from \"../../styles/image\";\nimport * as videoStyles from \"../../styles/video\";\nimport axios from 'axios';\nimport { connect } from \"react-redux\";\nimport * as threats from \"./Threats\";\nimport backendURL from '../../backendUrl';\nimport { Modal } from 'react-modal';\nimport { ModalHeader } from 'reactstrap';\nimport { ModalBody } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\nimport * as styles from \"../../styles/settings\";\nimport * as modalStyles from \"../../styles/modal\";\n\nclass ThreatSummary extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.toggleModal = e => {\n      console.log(this.state.modalIsOpen);\n      this.setState({\n        modalIsOpen: !this.state.modalIsOpen\n      });\n    };\n\n    this.render = props => {\n      var threatDetails = {};\n      /*switch(this.props.id)\r\n      {\r\n          case 1: threatDetails = threats[0]; break\r\n          case 2: threatDetails = threats[1]; break\r\n          case 3: threatDetails = threats[2]; break\r\n          case 4: threatDetails = threats[3]; break\r\n          case 5: threatDetails = threats[4]; break\r\n          case 6: threatDetails = threats[5]; break\r\n          case 7: threatDetails = threats[6]; break\r\n          case 8: threatDetails = threats[7]; break\r\n          }*/\n\n      var date = new Date().getMonth() + 1 + \"/\" + new Date().getDate() + \"/\" + new Date().getFullYear();\n      var location = \"37.3352° N, 121.8811° W\";\n      var city = \"San Jose\";\n      var camera = \"A103\";\n      var certainty = \"93%\";\n      var severity = \"High\";\n      const className = props.className;\n      console.log(this.state.modalIsOpen);\n      var closeModal = React.createElement(\"button\", {\n        className: \"close\",\n        onClick: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Close this modal and check if it works or don't do it but check it if works \");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: videoStyles.background,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: videoStyles.videoContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(LeftDrawer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        style: videoStyles.videoFrame,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: videoStyles.video,\n        src: '' + this.props.link,\n        width: \"100%;\",\n        height: \"500px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: videoStyles.videoInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \" Date: \", date, \" \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 Location: \", location, \" \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0 City: \", city, \"  \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0  Camera: \", camera, \" \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0  Severity: \", severity, \"  \\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0  Certainty: \", certainty), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Certain this is not a threat? \", React.createElement(Link, {\n        onClick: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Send Feedback Now\")))))), React.createElement(Modal, {\n        className: className,\n        isOpen: this.state.modalIsOpen,\n        toggle: this.toggleModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleModal,\n        close: closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"Send Feedback to Improve Threat Detection\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"hello testing if this is working because I'm not sure if it is and I have to confrim wheter it is working or not so I'm checking if its working or not with this\")));\n    };\n\n    this.state = {\n      modalIsOpen: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  componentDidMount() {//  this.props.summary();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    link: state.threatsReducer.link,\n    id: state.threatsReducer.id\n  };\n};\n\nconst mapDispatchStateToProps = dispatch => {\n  return {\n    summary: () => {\n      axios.get(backendURL + '/threat-summary').then(response => {\n        dispatch({\n          type: \"summary\",\n          payload: response.data\n        });\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchStateToProps)(ThreatSummary);\nModal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle: PropTypes.func,\n  role: PropTypes.string,\n  // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool,\n  // defaults to true\n  // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\n  returnFocusAfterClose: PropTypes.bool // defaults to true\n\n};","map":{"version":3,"sources":["C:/Users/Aysha/Desktop/Aysha/SJSU/Fall 2019/CMPE 295A/project/frontend/src/components/ThreatSummary/ThreatSummary.js"],"names":["React","Component","LeftDrawer","imageStyles","videoStyles","axios","connect","threats","backendURL","Modal","ModalHeader","ModalBody","Link","styles","modalStyles","ThreatSummary","constructor","props","toggleModal","e","console","log","state","modalIsOpen","setState","render","threatDetails","date","Date","getMonth","getDate","getFullYear","location","city","camera","certainty","severity","className","closeModal","background","videoContainer","videoFrame","video","link","videoInfo","bind","componentDidMount","mapStateToProps","threatsReducer","id","mapDispatchStateToProps","dispatch","summary","get","then","response","type","payload","data","propTypes","isOpen","PropTypes","bool","autoFocus","centered","size","string","toggle","func","role","labelledBy","keyboard","backdrop","oneOfType","oneOf","scrollable","onEnter","onExit","onOpened","onClosed","wrapClassName","modalClassName","backdropClassName","contentClassName","fade","cssModule","object","zIndex","number","backdropTransition","shape","Fade","modalTransition","innerRef","unmountOnClose","returnFocusAfterClose"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport '../../App.css';\r\nimport LeftDrawer from '../Drawer/Drawer';\r\nimport * as imageStyles from  \"../../styles/image\";\r\nimport * as videoStyles from  \"../../styles/video\";\r\nimport axios from 'axios';\r\nimport { connect } from \"react-redux\";\r\nimport * as threats from \"./Threats\";\r\nimport backendURL from '../../backendUrl';\r\nimport { Modal} from 'react-modal';\r\nimport { ModalHeader} from 'reactstrap';\r\nimport {ModalBody} from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport * as styles from \"../../styles/settings\"; \r\nimport * as modalStyles from \"../../styles/modal\";\r\n\r\nclass ThreatSummary extends Component {\r\n\r\n    constructor(props){\r\n        super(props); \r\n        this.state = {\r\n            modalIsOpen : false\r\n        }\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n\r\n    }\r\n    componentDidMount(){\r\n      //  this.props.summary();\r\n    }\r\n    toggleModal = (e) =>{\r\n        console.log(this.state.modalIsOpen);\r\n        this.setState({modalIsOpen : !this.state.modalIsOpen});\r\n    }\r\n    render = (props) => {\r\n        var threatDetails = {};\r\n        /*switch(this.props.id)\r\n        {\r\n            case 1: threatDetails = threats[0]; break\r\n            case 2: threatDetails = threats[1]; break\r\n            case 3: threatDetails = threats[2]; break\r\n            case 4: threatDetails = threats[3]; break\r\n            case 5: threatDetails = threats[4]; break\r\n            case 6: threatDetails = threats[5]; break\r\n            case 7: threatDetails = threats[6]; break\r\n            case 8: threatDetails = threats[7]; break\r\n\r\n\r\n        }*/\r\n\r\n        var date = (new Date().getMonth() + 1) + \"/\" + new Date().getDate() + \"/\" + new Date().getFullYear();\r\n        var location = \"37.3352° N, 121.8811° W\";\r\n        var city = \"San Jose\"\r\n        var camera = \"A103\";\r\n        var certainty = \"93%\";\r\n        var severity = \"High\";\r\n        const {className} = props;\r\n        console.log(this.state.modalIsOpen);\r\n        var closeModal =  <button className=\"close\" onClick={this.toggleModal}>Close this modal and check if it works or don't do it but check it if works </button>;\r\n        return (\r\n            <div>\r\n        <div  style={videoStyles.background} >\r\n         \r\n           \r\n            <div  style={videoStyles.videoContainer}  >\r\n            <LeftDrawer></LeftDrawer>\r\n            <div style={videoStyles.videoFrame}>\r\n        \r\n                <img style={videoStyles.video} src={''+this.props.link} width='100%;' height='500px'></img>\r\n            </div>\r\n              {/*   <iframe style={videoStyles.video} width=\"700px\" height=\"400px\" src=\"https://295-videos.s3.us-east-2.amazonaws.com/San-Jose-16th-Oct-2019.mp4\"></iframe> */}\r\n                <div style = {videoStyles.videoInfo}><h5> Date: {date} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Location: {location} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; City: {city}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Camera: {camera} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Severity: {severity}  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Certainty: {certainty}</h5>\r\n                <div><h5>Certain this is not a threat? <Link onClick = {this.toggleModal}>Send Feedback Now</Link></h5>\r\n               \r\n                </div>\r\n                </div>\r\n              \r\n            </div>\r\n   \r\n        </div> \r\n        <Modal\r\n            className = {className}\r\n          isOpen = {this.state.modalIsOpen}\r\n          toggle = {this.toggleModal}\r\n        >\r\n            <ModalHeader toggle={this.toggleModal} close={closeModal}>Send Feedback to Improve Threat Detection</ModalHeader>\r\n\r\n            <ModalBody>hello testing if this is working because I'm not sure if it is and I have to confrim wheter it is working or not so I'm checking if its working or not with this</ModalBody>\r\n         \r\n        </Modal>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state =>{\r\n   \r\n    return {\r\n        link : state.threatsReducer.link,\r\n        id : state.threatsReducer.id\r\n     }\r\n}\r\n\r\nconst mapDispatchStateToProps = dispatch => {\r\n    return {\r\n        summary : () => {\r\n            axios.get(backendURL + '/threat-summary').then(response=>{\r\n                dispatch({type: \"summary\",payload : response.data})\r\n            })\r\n                    \r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default (connect(mapStateToProps,mapDispatchStateToProps)(ThreatSummary));  \r\n\r\nModal.propTypes = {\r\n    // boolean to control the state of the popover\r\n    isOpen:  PropTypes.bool,\r\n    autoFocus: PropTypes.bool,\r\n    // if modal should be centered vertically in viewport\r\n    centered: PropTypes.bool,\r\n    // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\r\n    size: PropTypes.string,\r\n    // callback for toggling isOpen in the controlling component\r\n    toggle:  PropTypes.func,\r\n    role: PropTypes.string, // defaults to \"dialog\"\r\n    // used to reference the ID of the title element in the modal\r\n    labelledBy: PropTypes.string,\r\n    keyboard: PropTypes.bool,\r\n    // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\r\n    backdrop: PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.oneOf(['static'])\r\n    ]),\r\n    // if body of modal should be scrollable when content is long\r\n    scrollable: PropTypes.bool,\r\n    // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\r\n    // external: PropTypes.node,\r\n    // called on componentDidMount\r\n    onEnter: PropTypes.func,\r\n    // called on componentWillUnmount\r\n    onExit: PropTypes.func,\r\n    // called when done transitioning in\r\n    onOpened: PropTypes.func,\r\n    // called when done transitioning out\r\n    onClosed: PropTypes.func,\r\n    className: PropTypes.string,\r\n    wrapClassName: PropTypes.string,\r\n    modalClassName: PropTypes.string,\r\n    backdropClassName: PropTypes.string,\r\n    contentClassName: PropTypes.string,\r\n    // boolean to control whether the fade transition occurs (default: true)\r\n    fade: PropTypes.bool,\r\n    cssModule: PropTypes.object,\r\n    // zIndex defaults to 1000.\r\n    zIndex: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n    // backdropTransition - controls backdrop transition\r\n    // timeout is 150ms by default to match bootstrap\r\n    // see Fade for more details\r\n    backdropTransition: PropTypes.shape(Fade.propTypes),\r\n    // modalTransition - controls modal transition\r\n    // timeout is 300ms by default to match bootstrap\r\n    // see Fade for more details\r\n    modalTransition: PropTypes.shape(Fade.propTypes),\r\n    innerRef: PropTypes.object,\r\n    // if modal should be destructed/removed from DOM after closing\r\n    unmountOnClose: PropTypes.bool, // defaults to true\r\n    // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\r\n    returnFocusAfterClose: PropTypes.bool // defaults to true\r\n  }"]},"metadata":{},"sourceType":"module"}