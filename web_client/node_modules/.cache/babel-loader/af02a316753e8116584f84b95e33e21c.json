{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Aysha\\\\Desktop\\\\Aysha\\\\SJSU\\\\Fall 2019\\\\CMPE 295A\\\\project\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Aysha\\\\Desktop\\\\Aysha\\\\SJSU\\\\Fall 2019\\\\CMPE 295A\\\\project\\\\frontend\\\\src\\\\components\\\\ThreatSummary\\\\ModalExample.js\";\n\n/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst ModalExample = props => {\n  const buttonLabel = props.buttonLabel,\n        className = props.className;\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        modal = _useState2[0],\n        setModal = _useState2[1];\n\n  const toggle = () => setModal(!modal);\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"danger\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, buttonLabel), React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggle,\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(ModalHeader, {\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Modal title\"), React.createElement(ModalBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"), React.createElement(ModalFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(Button, {\n    color: \"primary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Do Something\"), ' ', React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Cancel\"))));\n};\n\nexport default ModalExample;\nModal.propTypes = {\n  // boolean to control the state of the popover\n  isOpen: PropTypes.bool,\n  autoFocus: PropTypes.bool,\n  // if modal should be centered vertically in viewport\n  centered: PropTypes.bool,\n  // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\n  size: PropTypes.string,\n  // callback for toggling isOpen in the controlling component\n  toggle: PropTypes.func,\n  role: PropTypes.string,\n  // defaults to \"dialog\"\n  // used to reference the ID of the title element in the modal\n  labelledBy: PropTypes.string,\n  keyboard: PropTypes.bool,\n  // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\n  backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n  // if body of modal should be scrollable when content is long\n  scrollable: PropTypes.bool,\n  // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\n  // external: PropTypes.node,\n  // called on componentDidMount\n  onEnter: PropTypes.func,\n  // called on componentWillUnmount\n  onExit: PropTypes.func,\n  // called when done transitioning in\n  onOpened: PropTypes.func,\n  // called when done transitioning out\n  onClosed: PropTypes.func,\n  className: PropTypes.string,\n  wrapClassName: PropTypes.string,\n  modalClassName: PropTypes.string,\n  backdropClassName: PropTypes.string,\n  contentClassName: PropTypes.string,\n  // boolean to control whether the fade transition occurs (default: true)\n  fade: PropTypes.bool,\n  cssModule: PropTypes.object,\n  // zIndex defaults to 1000.\n  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  // backdropTransition - controls backdrop transition\n  // timeout is 150ms by default to match bootstrap\n  // see Fade for more details\n  backdropTransition: PropTypes.shape(Fade.propTypes),\n  // modalTransition - controls modal transition\n  // timeout is 300ms by default to match bootstrap\n  // see Fade for more details\n  modalTransition: PropTypes.shape(Fade.propTypes),\n  innerRef: PropTypes.object,\n  // if modal should be destructed/removed from DOM after closing\n  unmountOnClose: PropTypes.bool,\n  // defaults to true\n  // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\n  returnFocusAfterClose: PropTypes.bool // defaults to true\n\n};","map":{"version":3,"sources":["C:/Users/Aysha/Desktop/Aysha/SJSU/Fall 2019/CMPE 295A/project/frontend/src/components/ThreatSummary/ModalExample.js"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","PropTypes","ModalExample","props","buttonLabel","className","modal","setModal","toggle","propTypes","isOpen","bool","autoFocus","centered","size","string","func","role","labelledBy","keyboard","backdrop","oneOfType","oneOf","scrollable","onEnter","onExit","onOpened","onClosed","wrapClassName","modalClassName","backdropClassName","contentClassName","fade","cssModule","object","zIndex","number","backdropTransition","shape","Fade","modalTransition","innerRef","unmountOnClose","returnFocusAfterClose"],"mappings":"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","sourcesContent":["/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ModalExample = (props) => {\r\n  const {\r\n    buttonLabel,\r\n    className\r\n  } = props;\r\n\r\n  const [modal, setModal] = useState(false);\r\n\r\n  const toggle = () => setModal(!modal);\r\n\r\n  return (\r\n    <div>\r\n      <Button color=\"danger\" onClick={toggle}>{buttonLabel}</Button>\r\n      <Modal isOpen={modal} toggle={toggle} className={className}>\r\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\r\n        <ModalBody>\r\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\r\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModalExample;\r\n\r\nModal.propTypes = {\r\n    // boolean to control the state of the popover\r\n    isOpen:  PropTypes.bool,\r\n    autoFocus: PropTypes.bool,\r\n    // if modal should be centered vertically in viewport\r\n    centered: PropTypes.bool,\r\n    // corresponds to bootstrap's modal sizes, ie. 'lg' or 'sm'\r\n    size: PropTypes.string,\r\n    // callback for toggling isOpen in the controlling component\r\n    toggle:  PropTypes.func,\r\n    role: PropTypes.string, // defaults to \"dialog\"\r\n    // used to reference the ID of the title element in the modal\r\n    labelledBy: PropTypes.string,\r\n    keyboard: PropTypes.bool,\r\n    // control backdrop, see http://v4-alpha.getbootstrap.com/components/modal/#options\r\n    backdrop: PropTypes.oneOfType([\r\n      PropTypes.bool,\r\n      PropTypes.oneOf(['static'])\r\n    ]),\r\n    // if body of modal should be scrollable when content is long\r\n    scrollable: PropTypes.bool,\r\n    // allows for a node/component to exist next to the modal (outside of it). Useful for external close buttons\r\n    // external: PropTypes.node,\r\n    // called on componentDidMount\r\n    onEnter: PropTypes.func,\r\n    // called on componentWillUnmount\r\n    onExit: PropTypes.func,\r\n    // called when done transitioning in\r\n    onOpened: PropTypes.func,\r\n    // called when done transitioning out\r\n    onClosed: PropTypes.func,\r\n    className: PropTypes.string,\r\n    wrapClassName: PropTypes.string,\r\n    modalClassName: PropTypes.string,\r\n    backdropClassName: PropTypes.string,\r\n    contentClassName: PropTypes.string,\r\n    // boolean to control whether the fade transition occurs (default: true)\r\n    fade: PropTypes.bool,\r\n    cssModule: PropTypes.object,\r\n    // zIndex defaults to 1000.\r\n    zIndex: PropTypes.oneOfType([\r\n      PropTypes.number,\r\n      PropTypes.string,\r\n    ]),\r\n    // backdropTransition - controls backdrop transition\r\n    // timeout is 150ms by default to match bootstrap\r\n    // see Fade for more details\r\n    backdropTransition: PropTypes.shape(Fade.propTypes),\r\n    // modalTransition - controls modal transition\r\n    // timeout is 300ms by default to match bootstrap\r\n    // see Fade for more details\r\n    modalTransition: PropTypes.shape(Fade.propTypes),\r\n    innerRef: PropTypes.object,\r\n    // if modal should be destructed/removed from DOM after closing\r\n    unmountOnClose: PropTypes.bool, // defaults to true\r\n    // if the element which triggered the modal to open should focused after the modal closes (see example somewhere below)\r\n    returnFocusAfterClose: PropTypes.bool // defaults to true\r\n  }"]},"metadata":{},"sourceType":"module"}